Boggle (OLD)
Board.java :
//public class Board {
//	private WordList wordlist;
//	private String[][] board;
//	
//	// Board Constructor
//	public Board(WordList wordlist, int boardsize) {
//		this.wordlist = wordlist;
//		board = new String[boardsize][boardsize];
//		Random r = new Random();
//		
//		for (int x = 0; x < boardsize; x++) {
//			for (int y = 0; y < boardsize; y++) {
//				String word = wordlist.get(r.nextInt(wordlist.size()));
//				board[x][y] = word.charAt(r.nextInt(word.length())) + "";
//			}
//		}
//		
//	}
//	
//	// toString 
//	public String toString() {
//		String words = new String();
//		for (int i = 0; i < board.length; i++) {
//			for (int k = 0; k < board[0].length; k++) {
//				words += board [i][k] + "  ";
//			}
//			words += "\n";
//		}
//		return words;
//	}
//
//	// This method calls the recursive method
//	public ArrayList<String> find(){
//		boolean[][] compl =  new boolean [board.length][board[0].length];
//		String words = "";
//		ArrayList<String> result = new ArrayList<>(); //returns array list
//		for (int i = 0; i < board.length; i++) {
//			for (int k = 0; k < board.length; k++) {
//				find(i, k, result, words, compl);
//			}	
//		}
//		
//		Collections.sort(result, new WordComparator()); //returns error sometimes ??
//		return result;	
//	}
//	
//	// This method overloads the previous method
//	public void find (int x, int y, ArrayList<String> result, String word, boolean[][] compl) {	
//		// checks if ints are out of bounds
//		if (x < 0 || y < 0 || x >= board.length || y >= board.length || compl[x][y]) {
//			return;
//		}
//		word += board[x][y];
//		compl[x][y] = true; //bread-crumbs
//		
//		// if found, add solution to list
//		if(wordlist.contains(word) && !result.contains(word)) {
//			result.add(word);	
//		}		
//		
//		//
//		for (int i = x-1; i >= 0 && i < board.length && i <= x + 1; i ++) {
//			for (int k = y-1; k >= 0 && k < board.length && k <= y+1; k++) {
//				if(!compl [i][k] && word.length() != wordlist.getLongestWordLength() ) {
//					find(i, k, result, word, makeCopy(compl)); //recursive call
//				}	
//			}
//		}
//		
//		compl[x][y] = false;
//		word = word.substring(0, word.length()-1);
//	}
//	
//	// This method makes a copy of the array
//	public boolean[][] makeCopy(boolean[][]compl){
//		 boolean[][] visited = new boolean[compl.length][compl[0].length];
//	        for (int i = 0; i < compl.length; i++) {
//	        	for (int k = 0; k < compl[0].length; k++) {
//	                visited[i][k] = compl[i][k];
//	            }
//	        }
//	        return visited;
//	}
//
//}

Program.java:
//public class Program {
//	
//	// This is the main method! This method creates objects established in other classes and basically starts the game,
//	// with formatting
//	public static void main(String[] args) {
//		// formatting
//		System.out.print("Welcome to Boggle, by Raika Roy Choudhury ");
//		WordList wordlist = new WordList ("WordList.txt", 3, 8);
//		Board board = new Board(wordlist, 4);
//		System.out.print("\n" + board);
//		
//		ArrayList <String> list = board.find();
//		
//		// printing solutions
//		int wordLen = list.get(0).length();
//		System.out.println("Found " + list.size() + " words(s)\n");
//		System.out.println(wordLen + " letter words");
//				
//		for (int i = 0; i < list.size(); i++) {
//			if (list.get(i).length() < wordLen) {
//				wordLen = list.get(i).length();
//					System.out.println("\n" + wordLen + " letter words");
//			}
//			System.out.println(list.get(i));
//		}
//	}
//	
//}

WordComparator.java:
//import java.util.*;
//public class WordComparator {
//	public int compare(String a, String b) {
//		if (a.length() > 0 && b.length() > 0) {
//			
//			if (b.length() - a.length() != 0) {
//				return b.length() - a.length();
//			
//			}
//		}
//		return a.compareTo(b);
//	}
//}

WordList.java :
from the project file